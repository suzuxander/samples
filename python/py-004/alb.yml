Parameters:
  Certificate:
    Type: String
  Ec2Instance:
    Type: String
  SubnetA:
    Type: String
  SubnetB:
    Type: String
  Vpc:
    Type: String
Resources:
  SampleListenerHttp:
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: '#{host}'
            Path: /#{path}
            Port: '443'
            Protocol: HTTPS
            Query: '#{query}'
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref 'SampleLoadBalancer'
      Port: 80
      Protocol: HTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
  SampleListenerHttps:
    Properties:
      Certificates:
        - CertificateArn: !Ref 'Certificate'
      DefaultActions:
        - TargetGroupArn: !Ref 'SampleTargetGroup'
          Type: forward
      LoadBalancerArn: !Ref 'SampleLoadBalancer'
      Port: 443
      Protocol: HTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
  SampleLoadBalancer:
    Properties:
      Name: sample-alb-https
      SecurityGroups:
        - !Ref 'SampleSecurityGroup'
      Subnets:
        - !Ref 'SubnetA'
        - !Ref 'SubnetB'
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  SampleSecurityGroup:
    Properties:
      GroupDescription: sample-security-group
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: '0.0.0.0/0'
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
      VpcId: !Ref 'Vpc'
    Type: AWS::EC2::SecurityGroup
  SampleTargetGroup:
    Properties:
      Name: sample-target-group-https
      Port: 443
      Protocol: HTTP
      Targets:
        - Id: !Ref 'Ec2Instance'
          Port: 80
      VpcId: !Ref 'Vpc'
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
